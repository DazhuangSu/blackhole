// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RollID.proto

package com.dp.blackhole.protocol.control;

public final class RollIDPB {
  private RollIDPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class RollID extends
      com.google.protobuf.GeneratedMessage {
    // Use RollID.newBuilder() to construct.
    private RollID() {
      initFields();
    }
    private RollID(boolean noInit) {}
    
    private static final RollID defaultInstance;
    public static RollID getDefaultInstance() {
      return defaultInstance;
    }
    
    public RollID getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dp.blackhole.protocol.control.RollIDPB.internal_static_blackhole_RollID_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dp.blackhole.protocol.control.RollIDPB.internal_static_blackhole_RollID_fieldAccessorTable;
    }
    
    // required string app_name = 1;
    public static final int APP_NAME_FIELD_NUMBER = 1;
    private boolean hasAppName;
    private java.lang.String appName_ = "";
    public boolean hasAppName() { return hasAppName; }
    public java.lang.String getAppName() { return appName_; }
    
    // required string app_server = 2;
    public static final int APP_SERVER_FIELD_NUMBER = 2;
    private boolean hasAppServer;
    private java.lang.String appServer_ = "";
    public boolean hasAppServer() { return hasAppServer; }
    public java.lang.String getAppServer() { return appServer_; }
    
    // required int64 period = 3;
    public static final int PERIOD_FIELD_NUMBER = 3;
    private boolean hasPeriod;
    private long period_ = 0L;
    public boolean hasPeriod() { return hasPeriod; }
    public long getPeriod() { return period_; }
    
    // required int64 roll_ts = 4;
    public static final int ROLL_TS_FIELD_NUMBER = 4;
    private boolean hasRollTs;
    private long rollTs_ = 0L;
    public boolean hasRollTs() { return hasRollTs; }
    public long getRollTs() { return rollTs_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasAppName) return false;
      if (!hasAppServer) return false;
      if (!hasPeriod) return false;
      if (!hasRollTs) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasAppName()) {
        output.writeString(1, getAppName());
      }
      if (hasAppServer()) {
        output.writeString(2, getAppServer());
      }
      if (hasPeriod()) {
        output.writeInt64(3, getPeriod());
      }
      if (hasRollTs()) {
        output.writeInt64(4, getRollTs());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAppName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getAppName());
      }
      if (hasAppServer()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getAppServer());
      }
      if (hasPeriod()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getPeriod());
      }
      if (hasRollTs()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, getRollTs());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.dp.blackhole.protocol.control.RollIDPB.RollID parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollIDPB.RollID parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollIDPB.RollID parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollIDPB.RollID parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollIDPB.RollID parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollIDPB.RollID parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollIDPB.RollID parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.RollIDPB.RollID parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.dp.blackhole.protocol.control.RollIDPB.RollID parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.dp.blackhole.protocol.control.RollIDPB.RollID parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dp.blackhole.protocol.control.RollIDPB.RollID prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.dp.blackhole.protocol.control.RollIDPB.RollID result;
      
      // Construct using com.dp.blackhole.protocol.control.RollIDPB.RollID.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.dp.blackhole.protocol.control.RollIDPB.RollID();
        return builder;
      }
      
      protected com.dp.blackhole.protocol.control.RollIDPB.RollID internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.dp.blackhole.protocol.control.RollIDPB.RollID();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dp.blackhole.protocol.control.RollIDPB.RollID.getDescriptor();
      }
      
      public com.dp.blackhole.protocol.control.RollIDPB.RollID getDefaultInstanceForType() {
        return com.dp.blackhole.protocol.control.RollIDPB.RollID.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.dp.blackhole.protocol.control.RollIDPB.RollID build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.dp.blackhole.protocol.control.RollIDPB.RollID buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.dp.blackhole.protocol.control.RollIDPB.RollID buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.dp.blackhole.protocol.control.RollIDPB.RollID returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dp.blackhole.protocol.control.RollIDPB.RollID) {
          return mergeFrom((com.dp.blackhole.protocol.control.RollIDPB.RollID)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.dp.blackhole.protocol.control.RollIDPB.RollID other) {
        if (other == com.dp.blackhole.protocol.control.RollIDPB.RollID.getDefaultInstance()) return this;
        if (other.hasAppName()) {
          setAppName(other.getAppName());
        }
        if (other.hasAppServer()) {
          setAppServer(other.getAppServer());
        }
        if (other.hasPeriod()) {
          setPeriod(other.getPeriod());
        }
        if (other.hasRollTs()) {
          setRollTs(other.getRollTs());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setAppName(input.readString());
              break;
            }
            case 18: {
              setAppServer(input.readString());
              break;
            }
            case 24: {
              setPeriod(input.readInt64());
              break;
            }
            case 32: {
              setRollTs(input.readInt64());
              break;
            }
          }
        }
      }
      
      
      // required string app_name = 1;
      public boolean hasAppName() {
        return result.hasAppName();
      }
      public java.lang.String getAppName() {
        return result.getAppName();
      }
      public Builder setAppName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasAppName = true;
        result.appName_ = value;
        return this;
      }
      public Builder clearAppName() {
        result.hasAppName = false;
        result.appName_ = getDefaultInstance().getAppName();
        return this;
      }
      
      // required string app_server = 2;
      public boolean hasAppServer() {
        return result.hasAppServer();
      }
      public java.lang.String getAppServer() {
        return result.getAppServer();
      }
      public Builder setAppServer(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasAppServer = true;
        result.appServer_ = value;
        return this;
      }
      public Builder clearAppServer() {
        result.hasAppServer = false;
        result.appServer_ = getDefaultInstance().getAppServer();
        return this;
      }
      
      // required int64 period = 3;
      public boolean hasPeriod() {
        return result.hasPeriod();
      }
      public long getPeriod() {
        return result.getPeriod();
      }
      public Builder setPeriod(long value) {
        result.hasPeriod = true;
        result.period_ = value;
        return this;
      }
      public Builder clearPeriod() {
        result.hasPeriod = false;
        result.period_ = 0L;
        return this;
      }
      
      // required int64 roll_ts = 4;
      public boolean hasRollTs() {
        return result.hasRollTs();
      }
      public long getRollTs() {
        return result.getRollTs();
      }
      public Builder setRollTs(long value) {
        result.hasRollTs = true;
        result.rollTs_ = value;
        return this;
      }
      public Builder clearRollTs() {
        result.hasRollTs = false;
        result.rollTs_ = 0L;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:blackhole.RollID)
    }
    
    static {
      defaultInstance = new RollID(true);
      com.dp.blackhole.protocol.control.RollIDPB.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:blackhole.RollID)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_blackhole_RollID_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_blackhole_RollID_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014RollID.proto\022\tblackhole\"O\n\006RollID\022\020\n\010a" +
      "pp_name\030\001 \002(\t\022\022\n\napp_server\030\002 \002(\t\022\016\n\006per" +
      "iod\030\003 \002(\003\022\017\n\007roll_ts\030\004 \002(\003B-\n!com.dp.bla" +
      "ckhole.protocol.controlB\010RollIDPB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_blackhole_RollID_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_blackhole_RollID_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_blackhole_RollID_descriptor,
              new java.lang.String[] { "AppName", "AppServer", "Period", "RollTs", },
              com.dp.blackhole.protocol.control.RollIDPB.RollID.class,
              com.dp.blackhole.protocol.control.RollIDPB.RollID.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
